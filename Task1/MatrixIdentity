#include <iostream>
using namespace std;

const int maxsize = 10;

void matrixMultiply(int A[maxsize][maxsize], int B[maxsize][maxsize], int result[maxsize][maxsize], int m, int n, int p) {
    for (int i = 0; i < m; i++) {
        for (int j = 0; j < p; j++) {
            result[i][j] = 0;
            for (int k = 0; k < n; k++) {
                result[i][j] += A[i][k] * B[k][j];
            }
        }
    }
}

void transposeMatrix(int original[maxsize][maxsize], int transposed[maxsize][maxsize], int rows, int cols) {
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            transposed[j][i] = original[i][j];
        }
    }
}
bool compareMatrix(int matrix1[maxsize][maxsize], int matrix2[maxsize][maxsize], int rows, int cols) {
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            if (matrix1[i][j] != matrix2[i][j]) {
                return false;  // Matrices are not equal
            }
        }
    }
    return true;  // Matrices are equal
}


// Function to display a matrix
void displayMatrix(int matrix[maxsize][maxsize], int rows, int cols) {

    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            cout << matrix[i][j] << " ";
        }
        cout << endl;
    }
}

int main() {

    int A[maxsize][maxsize], B[maxsize][maxsize], result[maxsize][maxsize], transposeB[maxsize][maxsize];
    int m, n, p;

    cout << "Enter the size of matrix A (m x n): ";
    cin >> m >> n;

    cout << "Enter elements of matrix A:\n";
    for (int i = 0; i < m; i++) {
        for (int j = 0; j < n; j++) {
            cin >> A[i][j];
        }
    }

    cout << "Enter the size of matrix B (n x p): ";
    cin >> n >> p;

    cout << "Enter elements of matrix B:\n";
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < p; j++) {
            cin >> B[i][j];
        }
    }
    matrixMultiply(A, B, result, m, n, p);
    transposeMatrix(B, transposeB, n, p);

    cout << "\nMatrix A:\n";
    displayMatrix(A, m, n);

    cout << "\nMatrix B:\n";
    displayMatrix(B, n, p);

    cout << "\nMatrix (A * B):\n";
    displayMatrix(result, m, p);

    cout << "\nTranspose of Matrix B:\n";
    displayMatrix(transposeB, p, n);

    cout << "\nVerifying the identity ((A * B)') = B' A':\n";
    int verifyResult[maxsize][maxsize];
    transposeMatrix(result, verifyResult, m, p);

    if (m == p && n == m) {
        if (compareMatrix(transposeB, verifyResult, p, m)) {
            cout << "The identity is verified.\n";
        } else {
            cout << "The identity is not verified.\n";
        }
    } else {
        cout << "The matrices do not satisfy the conditions for verification.\n";
    }

    return 0;
}
